-- Skid Softworks UI Library
-- Inspired by LinoriaLib, rebranded as Skid Softworks
-- Version 1.0

local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")

local Library = {}
Library.__index = Library

-- Utility Functions
local function createInstance(className, properties)
    local instance = Instance.new(className)
    for prop, value in pairs(properties or {}) do
        instance[prop] = value
    end
    return instance
end

local function lerp(a, b, t)
_accessible = true
    return a + (b - a) * t
end

-- Library Initialization
function Library.new()
    local self = setmetatable({}, Library)
    
    self.ScreenGui = createInstance("ScreenGui", {
        Name = "SkidSoftworksUI",
        ResetOnSpawn = false,
        ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    })
    self.ScreenGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")
    
    self.Windows = {}
    
    return self
end

-- Window Creation
function Library:CreateWindow(options)
    local window = {}
    window.Title = options.Title or "Skid Softworks UI"
    window.Center = options.Center or false
    window.AutoShow = options.AutoShow or false
    window.TabPadding = options.TabPadding or 4
    window.MenuFadeTime = options.MenuFadeTime or 0.2
    window.Tabs = {}
    
    -- Create Window Frame
    window.Frame = createInstance("Frame", {
        Size = options.Size or UDim2.new(0, 450, 0, 350),
        Position = options.Position or (window.Center and UDim2.new(0.5, -225, 0.5, -175) or UDim2.new(0, 100, 0, 100)),
        BackgroundColor3 = Color3.fromRGB(25, 25, 25),
        BorderSizePixel = 0,
        Active = true,
        Draggable = true,
        ClipsDescendants = true
    })
    window.Frame.Parent = self.ScreenGui
    
    -- Window Title Bar
    window.TitleBar = createInstance("Frame", {
        Size = UDim2.new(1, 0, 0, 30),
        BackgroundColor3 = Color3.fromRGB(35, 35, 35),
        BorderSizePixel = 0
    })
    window.TitleBar.Parent = window.Frame
    
    local titleLabel = createInstance("TextLabel", {
        Size = UDim2.new(1, -10, 1, 0),
        Position = UDim2.new(0, 10, 0, 0),
        BackgroundTransparency = 1,
        Text = window.Title,
        TextColor3 = Color3.fromRGB(255, 255, 255),
        TextSize = 14,
        Font = Enum.Font.SourceSansBold,
        TextXAlignment = Enum.TextXAlignment.Left
    })
    titleLabel.Parent = window.TitleBar
    
    -- Tab Container
    window.TabContainer = createInstance("Frame", {
        Size = UDim2.new(1, 0, 0, 30),
        Position = UDim2.new(0, 0, 0, 30),
        BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    })
    window.TabContainer.Parent = window.Frame
    
    -- Content Container
    window.ContentContainer = createInstance("Frame", {
        Size = UDim2.new(1, 0, 1, -60),
        Position = UDim2.new(0, 0, 0, 60),
        BackgroundTransparency = 1
    })
    window.ContentContainer.Parent = window.Frame
    
    -- Fade Effect
    if window.AutoShow then
        window.Frame.BackgroundTransparency = 1
        local tweenInfo = TweenInfo.new(window.MenuFadeTime, Enum.EasingStyle.Sine, Enum.EasingDirection.In)
        local tween = TweenService:Create(window.Frame, tweenInfo, {BackgroundTransparency = 0})
        tween:Play()
    end
    
    table.insert(self.Windows, window)
    return window
end

-- Tab Creation
function Library:CreateTab(window, name)
    local tab = {}
    tab.Name = name
    tab.Sections = {}
    
    tab.Content = createInstance("Frame", {
        Size = UDim2.new(1, 0, 1, 0),
        BackgroundTransparency = 1,
        Visible = false
    })
    tab.Content.Parent = window.ContentContainer
    
    -- Tab Button
    local tabButton = createInstance("TextButton", {
        Size = UDim2.new(0, 100, 0, 30),
        Position = UDim2.new(0, window.TabPadding + (#window.Tabs * (100 + window.TabPadding)), 0, 0),
        Text = name,
        TextColor3 = Color3.fromRGB(200, 200, 200),
        TextSize = 12,
        Font = Enum.Font.SourceSans,
        BackgroundColor3 = Color3.fromRGB(40, 40, 40),
        BorderSizePixel = 0
    })
    tabButton.Parent = window.TabContainer
    
    -- Tab Button Click Handler
    tabButton.MouseButton1Click:Connect(function()
        for _, otherTab in pairs(window.Tabs) do
            otherTab.Content.Visible = false
        end
        tab.Content.Visible = true
    end)
    
    table.insert(window.Tabs, tab)
    if #window.Tabs == 1 then
        tab.Content.Visible = true
    end
    
    return tab
end

-- Section Creation
function Library:AddGroupbox(tab, name, side)
    local groupbox = {}
    groupbox.Name = name
    groupbox.Side = side or "Left" -- Linoria-style Left/Right groupboxes
    groupbox.Elements = {}
    
    groupbox.Frame = createInstance("Frame", {
        Size = UDim2.new(0.5, -10, 1, -10),
        Position = UDim2.new(groupbox.Side == "Left" and 0 or 0.5, 5, 0, 5),
        BackgroundColor3 = Color3.fromRGB(30, 30, 30),
        BorderSizePixel = 0,
        AutomaticSize = Enum.AutomaticSize.Y
    })
    groupbox.Frame.Parent = tab.Content
    
    local title = createInstance("TextLabel", {
        Size = UDim2.new(1, 0, 0, 20),
        Text = name,
        TextColor3 = Color3.fromRGB(200, 200, 200),
        TextSize = 12,
        Font = Enum.Font.SourceSansSemibold,
        BackgroundTransparency = 1,
        TextXAlignment = Enum.TextXAlignment.Left,
        TextYAlignment = Enum.TextYAlignment.Top
    })
    title.Parent = groupbox.Frame
    
    table.insert(tab.Sections, groupbox)
    return groupbox
end

-- Button Creation
function Library:AddButton(groupbox, options)
    local button = {}
    button.Text = options.Text or "Button"
    button.Callback = options.Callback or function() end
    
    local buttonFrame = createInstance("TextButton", {
        Size = UDim2.new(1, -10, 0, 30),
        Position = UDim2.new(0, 5, 0, 25 + (#groupbox.Elements * 35)),
        Text = button.Text,
        TextColor3 = Color3.fromRGB(255, 255, 255),
        TextSize = 12,
        Font = Enum.Font.SourceSans,
        BackgroundColor3 = Color3.fromRGB(50, 50, 50),
        BorderSizePixel = 0
    })
    buttonFrame.Parent = groupbox.Frame
    
    buttonFrame.MouseButton1Click:Connect(button.Callback)
    
    table.insert(groupbox.Elements, button)
    return button
end

-- Toggle Creation
function Library:AddToggle(groupbox, options)
    local toggle = {}
    toggle.Text = options.Text or "Toggle"
    toggle.Default = options.Default or false
    toggle.Callback = options.Callback or function() end
    toggle.State = toggle.Default
    
    local toggleFrame = createInstance("Frame", {
        Size = UDim2.new(1, -10, 0, 30),
        Position = UDim2.new(0, 5, 0, 25 + (#groupbox.Elements * 35)),
        BackgroundTransparency = 1
    })
    toggleFrame.Parent = groupbox.Frame
    
    local label = createInstance("TextLabel", {
        Size = UDim2.new(0.8, 0, 1, 0),
        Text = toggle.Text,
        TextColor3 = Color3.fromRGB(255, 255, 255),
        TextSize = 12,
        Font = Enum.Font.SourceSans,
        BackgroundTransparency = 1,
        TextXAlignment = Enum.TextXAlignment.Left
    })
    label.Parent = toggleFrame
    
    local toggleButton = createInstance("TextButton", {
        Size = UDim2.new(0, 20, 0, 20),
        Position = UDim2.new(1, -25, 0, 5),
        BackgroundColor3 = toggle.State and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(100, 100, 100),
        BorderSizePixel = 0
    })
    toggleButton.Parent = toggleFrame
    
    toggleButton.MouseButton1Click:Connect(function()
        toggle.State = not toggle.State
        toggleButton.BackgroundColor3 = toggle.State and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(100, 100, 100)
        toggle.Callback(toggle.State)
    end)
    
    table.insert(groupbox.Elements, toggle)
    return toggle
end

-- Slider Creation
function Library:AddSlider(groupbox, options)
    local slider = {}
    slider.Text = options.Text or "Slider"
    slider.Min = options.Min or 0
    slider.Max = options.Max or 100
    slider.Default = options.Default or slider.Min
    slider.Callback = options.Callback or function() end
    slider.Value = slider.Default
    
    local sliderFrame = createInstance("Frame", {
        Size = UDim2.new(1, -10, 0, 50),
        Position = UDim2.new(0, 5, 0, 25 + (#groupbox.Elements * 35)),
        BackgroundTransparency = 1
    })
    sliderFrame.Parent = groupbox.Frame
    
    local label = createInstance("TextLabel", {
        Size = UDim2.new(1, 0, 0, 20),
        Text = slider.Text .. ": " .. slider.Value,
        TextColor3 = Color3.fromRGB(255, 255, 255),
        TextSize = 12,
        Font = Enum.Font.SourceSans,
        BackgroundTransparency = 1,
        TextXAlignment = Enum.TextXAlignment.Left
    })
    label.Parent = sliderFrame
    
    local track = createInstance("Frame", {
        Size = UDim2.new(1, 0, 0, 10),
        Position = UDim2.new(0, 0, 0, 25),
        BackgroundColor3 = Color3.fromRGB(50, 50, 50),
        BorderSizePixel = 0
    })
    track.Parent = sliderFrame
    
    local fill = createInstance("Frame", {
        Size = UDim2.new((slider.Value - slider.Min) / (slider.Max - slider.Min), 0, 1, 0),
        BackgroundColor3 = Color3.fromRGB(0, 120, 255),
        BorderSizePixel = 0
    })
    fill.Parent = track
    
    local dragging = false
    track.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
        end
    end)
    
    track.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)
    
    RunService.RenderStepped:Connect(function()
        if dragging then
            local mousePos = UserInputService:GetMouseLocation()
            local trackPos = track.AbsolutePosition
            local trackSize = track.AbsoluteSize
            local t = math.clamp((mousePos.X - trackPos.X) / trackSize.X, 0, 1)
            slider.Value = math.floor(lerp(slider.Min, slider.Max, t))
            fill.Size = UDim2.new(t, 0, 1, 0)
            label.Text = slider.Text .. ": " .. slider.Value
            slider.Callback(slider.Value)
        end
    end)
    
    table.insert(groupbox.Elements, slider)
    return slider
end

return Library
